spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.Url=jdbc:mysql://localhost:3306/sb_redis?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
#spring.datasource.Url=jdbc:mysql://192.168.182.128:3306/sb_redis?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.Url=jdbc:mysql://192.168.182.128:3306/seckill?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
#spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#spring.datasource.druid.test-while-idle=true
#spring.datasource.druid.test-on-borrow=false
#spring.datasource.druid.test-on-return=false

mybatis.config-location=classpath:mybatis-config.xml

server.port=8080
#server.context-path=/
server.servlet.context-path=/
# actuator监控信息
#spring.security.user.name=admin
#spring.security.user.password=admin
#management.endpoint.health.show-details=always
#management.endpoints.web.exposure.include=*
#热部署生效,原理是两个ClassLoader，还需设置IDEA自动编译
#spring.devtools.restart.enabled=true
#设置重启的目录
#spring.devtools.restart.additional-paths=src/main/java
#classpath目录下的WEB-INF文件夹内容修改不重启
#spring.devtools.restart.exclude=WEB-INF/**

#使用redis做二级缓存
#spring.cache.type=redis

# Redis服务器地址
#spring.redis.host=127.0.0.1
spring.redis.host=192.168.182.128
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# Redis数据库索引（默认为0）
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=5000

#sentinel配置，连的不再是某个节点，而是哨兵系统
#集群
#把节点全部列出,主节点最好是奇数个，每个主节点最好配有至少一个从节点
#spring.redis.cluster.nodes=192.168.182.128:7000,192.168.182.128:7001,192.168.182.128:7002,192.168.182.128:7003,192.168.182.128:7004,192.168.182.128:7005,192.168.182.128:7006
#哨兵
#sentinel.conf中起的名字
#spring.redis.sentinel.master=mymaster
#哨兵的ip:port
#spring.redis.sentinel.nodes=192...:26379

logging.config=classpath:logback-spring.xml
logging.level.com.amaan.springbootmybatisredis.mapper=DEBUG

##kafka相关配置
## kafka服务器地址，多个集群用逗号分隔
spring.kafka.bootstrap-servers=192.168.182.128:9092
##设置一个默认组
spring.kafka.consumer.group-id=ConsumerGroup-A
##key-value序列化反序列化
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#自动提交位移
#spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.auto-commit-interval=1000
#手动提交位移
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.batch-size=65536
spring.kafka.producer.buffer-memory=524288
#持久化相关，0不保证消息成功发送，但吞吐量最高;与Rabbit MQ的ack(消息确认)差异很大
spring.kafka.producer.acks=-1
spring.kafka.producer.retries=0
spring.kafka.producer.properties.enable.idempotence=true

##Dubbo 服务提供者配置
##应用名称
#dubbo.application.name=provider
##注册中心地址
#dubbo.registry.protocol=zookeeper
#dubbo.registry.address=zookeeper://192.168.182.128:2181
##协议名称
#dubbo.protocol.name=dubbo
##协议端口
#dubbo.protocol.port=20880
##扫描服务类包目录，否则注册不到服务
#dubbo.scan.base-packages=com.amaan.dubbo.service