spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.Url=jdbc:mysql://localhost:3306/sb_redis?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
#spring.datasource.Url=jdbc:mysql://192.168.182.128:3306/sb_redis?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.Url=jdbc:mysql://192.168.182.128:3306/seckill?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
mybatis.config-location=classpath:mybatis-config.xml

server.port=8080
#server.context-path=/
server.servlet.context-path=/
# actuator监控信息
#spring.security.user.name=admin
#spring.security.user.password=admin
#management.endpoint.health.show-details=always
#management.endpoints.web.exposure.include=*
#热部署生效,原理是两个ClassLoader，还需设置IDEA自动编译
#spring.devtools.restart.enabled=true
#设置重启的目录
#spring.devtools.restart.additional-paths=src/main/java
#classpath目录下的WEB-INF文件夹内容修改不重启
#spring.devtools.restart.exclude=WEB-INF/**

#使用redis做二级缓存
#spring.cache.type=redis

# Redis服务器地址
#spring.redis.host=127.0.0.1
spring.redis.host=192.168.182.128
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# Redis数据库索引（默认为0）
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=5000

#sentinel配置，连的不再是某个节点，而是哨兵系统
#集群
#把节点全部列出,主节点最好是奇数个，每个主节点最好配有至少一个从节点
#spring.redis.cluster.nodes=192.168.182.128:7000,192.168.182.128:7001,192.168.182.128:7002,192.168.182.128:7003,192.168.182.128:7004,192.168.182.128:7005,192.168.182.128:7006
#哨兵
#sentinel.conf中起的名字
#spring.redis.sentinel.master=mymaster
#哨兵的ip:port
#spring.redis.sentinel.nodes=192...:26379

logging.config=classpath:logback-spring.xml
logging.level.com.amaan.springbootmybatisredis.mapper=DEBUG

##kafka相关配置
## kafka服务器地址，多个集群用逗号分隔
spring.kafka.bootstrap-servers=192.168.182.128:9092
##设置一个默认组
spring.kafka.consumer.group-id=defaultGroup
##key-value序列化反序列化
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#自动提交位移
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.batch-size=65536
spring.kafka.producer.buffer-memory=524288
#持久化相关，0不保证消息成功发送，但吞吐量最高;与Rabbit MQ的ack(消息确认)差异很大
spring.kafka.producer.acks=1

#spring.shardingsphere.datasource.names=ds-master-0,ds-master-1
##允许一个实体类对应两张表
#spring.main.allow-bean-definition-overriding=true
##,ds-master-0-slave-0,ds-master-1-slave-0
#spring.shardingsphere.datasource.ds-master-0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds-master-0.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds-master-0.url=jdbc:mysql://localhost:3306/sb_redis?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.ds-master-0.username=root
#spring.shardingsphere.datasource.ds-master-0.password=
##主库master-0的从库slave-0：ds-master-0-slave-0
##spring.shardingsphere.datasource.ds-master-0-slave-0.type=com.alibaba.druid.pool.DruidDataSource
##spring.shardingsphere.datasource.ds-master-0-slave-0.driver-class-name=com.mysql.jdbc.Driver
##spring.shardingsphere.datasource.ds-master-0-slave-0.url=jdbc:mysql://localhost:3306/slave_db?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=UTC
##spring.shardingsphere.datasource.ds-master-0-slave-0.username=root
##spring.shardingsphere.datasource.ds-master-0-slave-0.password=
#
#spring.shardingsphere.datasource.ds-master-1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds-master-1.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds-master-1.url=jdbc:mysql://192.168.182.128:3306/sb_redis?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.ds-master-1.username=root
#spring.shardingsphere.datasource.ds-master-1.password=123456
#
##指定表的分布情况 ds_$->{0..1}.user_$->{0..4}表示数据在数据库ds_0和ds_1中的各自user_0、user_1、user_2、user_3、user_4表中
#spring.shardingsphere.sharding.tables.run_data.actual-data-nodes=ds-master-$->{0..1}.run_data_2020_$->{0..2}
##分库字段与分库逻辑
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=garage_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds-master-$->{garage_id}
##配置run_data表(逻辑表，也是面向MyBatis中SQL语句开放的表)数据切分的字段
#spring.shardingsphere.sharding.tables.run_data.table-strategy.inline.sharding-column=month
#spring.shardingsphere.sharding.tables.run_data.table-strategy.inline.algorithm-expression=run_data_2020_$->{month % 3}
##主键生成策略
#spring.shardingsphere.sharding.tables.run_data.key-generator.column=id
#spring.shardingsphere.sharding.tables.run_data.key-generator.type=SNOWFLAKE
##打开SQL日志输出
#spring.shardingsphere.props.sql.show=true

#垂直分库
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds-master-0.t_user
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=uid
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user
#spring.shardingsphere.sharding.tables.run_data.key-generator.column=uid
#spring.shardingsphere.sharding.tables.run_data.key-generator.type=SNOWFLAKE

#配置公共表
#spring.shardingsphere.sharding.broadcast-tables=t_garage_info
#spring.shardingsphere.sharding.tables.t_garage_info.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_garage_info.key-generator.type=SNOWFLAKE
